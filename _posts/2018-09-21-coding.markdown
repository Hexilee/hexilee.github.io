---
layout:     post
title:      "编码：字符串和二进制"
subtitle:   "Encoding: String and Binary"
date:       2018-09-21 19:48:00
author:     "Hexi"
header-img: "img/bg/2018-09-21-coding-bg.jpg"
tags:
    - Encoding
---

#### Introduction

计算机是如何储存数据的？

毫无疑问，对现代计算机来说，数据的基本单元是位（`bit`），即一位二进制数，值为 `0` 或 `1`。那用枯燥的二进制如何描述出文字、图片、视频等丰富多彩的内容呢？

我最初了解计算机相关知识时，这是最吸引我的问题，而它最简洁的答案就是编码。

编码是计算机的基石，其内容十分庞大，本篇文章不可能涉及太多，仅仅介绍字符串的相关内容。

#### 字符集

[字符集](https://baike.baidu.com/item/%E5%AD%97%E7%AC%A6%E9%9B%86) 顾名思义就是字符的集合，或者说是数字到字符的映射。在计算机发展的早期 [ASCII](https://baike.baidu.com/item/ASCII) 渐渐地成为了标准，而现在最常用的字符集则是 [Unicode](https://baike.baidu.com/item/Unicode)。

##### ASCII

ASCII 使用一个 `byte(1 byte = 8 bits)` 代表一个字符，但不使用最高位。所以其表示范围是 `0x00 - 0x7F` （即十进制的 `0 - 127`），其中有 33 个不可见字符和 95 个可见字符。

![ASCII](/img/in-post/ascii.jpg){:class="img-responsive"}

如果在 Python3 中展示的话

```bash
>>> ord('a')
97
>>> chr(97)
'a'
>>> chr(ord('a') + 3)
'd'
```

##### Unicode

ASCII 只能显示26个基本拉丁字母、阿拉伯数目字和英式标点符号，因此只能用于显示现代美国英语。而随着计算机的飞速发展，ASCII 的局限性变得越来越明显。

后面出现了 [EASCII (Extended ASCII)](https://baike.baidu.com/item/EASCII)，即把 ASCII 扩充为 7 位，表示范围是 `0x00 - 0xFF`（即十进制 `0 - 255`）。EASCII 解决了部分西欧语言的显示问题，但对更多其他语言依然无能为力。

而现在成为业界标准的 Unicode 对世界上大部分的文字系统（甚至 emoji）进行了整理、编码，使得电脑可以用更为简单的方式来呈现和处理文字。

Unicode 与 EASCII 兼容。

如

```bash
>>> ord('a')
97
>>> ord('西')
35199
>>> chr(128514)
'😂'
```

#### 字符编码

对于单字节字符集来说，字符编码似乎是可有可无的东西，如 [Latin-1](https://baike.baidu.com/item/Latin1) ，每个 `byte` 代表一个字符，毫无歧义和空间浪费。

但对于多字节字符集来说，字符编码的选择就变得十分重要。

比如，有一个数字 `32382(0x7E7E)`，它的长度为两个 `bytes`，那它到底表示两个 `'~'(码值为 126[0x7E])` 还是一个 `繾（码值为 32382）` 呢？

为了消除歧义，我们可以使用两个 `bytes`（最初最大的 Unicode 不超出 `0xFFFF`） 来表示一个字符，这样的确消除了歧义，但却造成了空间浪费 —— 如果所编码字符码值都在 `0x00 - 0xFF` 范围内的话，就有一半的空间是浪费的。

而在 Unicode 码值范围为 `0x00000000 - 0xFFFFFFFF` 的今天，我们消除歧义的代价就是最高 75% 的空间浪费！






